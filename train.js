// Generated by CoffeeScript 1.9.1
(function() {
  var _main, fs, labelAndFile, main, readCSV, shuffule, svm;

  fs = require('fs');

  svm = require('node-svm');

  labelAndFile = {};

  main = function() {
    console.log(new Date());
    labelAndFile = {
      0: "寝ている.csv",
      1: "立っている.csv",
      2: "歩いている.csv",
      3: "走っている.csv",
      4: "座っている.csv"
    };
    console.log(labelAndFile);
    return _main(function() {
      console.log("end.");
      labelAndFile = {
        0: "寝転ぶ.csv",
        1: "座る.csv",
        2: "振り向き右.csv",
        3: "正面を向く.csv",
        4: "立つ.csv",
        5: "起きる.csv",
        6: "動かず.csv"
      };
      console.log(labelAndFile);
      return _main(function() {
        return console.log("end.");
      });
    });
  };

  _main = function(cb) {
    var clf, predictionSet, ref, trainingSet;
    ref = (Object.keys(labelAndFile).map(function(label) {
      var _a, _b, arr, csv, filepath, sep;
      filepath = labelAndFile[label];
      csv = readCSV(filepath, {
        encoding: "utf-8"
      });
      csv = csv.map(function(a) {
        return a.map(function(b) {
          return Number(b);
        });
      });
      arr = csv.map(function(row) {
        return [row, Number(label)];
      });
      if (label === "6") {
        arr = shuffule(arr).slice(0, 300);
      }
      sep = arr.length / 2 | 0;
      _a = arr.slice(0, sep);
      _b = arr.slice(sep);
      return [_a, _b];
    })).reduce((function(arg, arg1) {
      var a, b, c, d;
      a = arg[0], b = arg[1];
      c = arg1[0], d = arg1[1];
      return [a.concat(c), b.concat(d)];
    }), [[], []]), trainingSet = ref[0], predictionSet = ref[1];
    clf = new svm.CSVC();
    console.time("train");
    return clf.train(trainingSet).done(function() {
      var results;
      console.timeEnd("train");
      results = Object.keys(labelAndFile).reduce((function(o, label) {
        o[label] = Object.keys(labelAndFile).map(function() {
          return 0;
        });
        return o;
      }), {});
      predictionSet.forEach(function(arg) {
        var label, prediction, vect;
        vect = arg[0], label = arg[1];
        prediction = clf.predictSync(vect);
        return results[label][prediction]++;
      });
      console.log(results);
      return cb();
    });
  };

  shuffule = function(arr) {
    var _arr, index;
    _arr = [];
    while (arr.length > 0) {
      index = arr.length * Math.random();
      _arr.push(arr.splice(index, 1)[0]);
    }
    return _arr;
  };

  readCSV = function(path) {
    return fs.readFileSync(path, {
      encoding: "utf-8"
    }).split("\n").filter(function(a) {
      return a.length > 0;
    }).map(function(a) {
      return a.split(",");
    }).map(function(a) {
      return a.map(function(b) {
        return b.trim();
      });
    });
  };

  main();

}).call(this);
